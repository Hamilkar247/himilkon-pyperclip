# Generated by Django 3.1.2 on 2020-12-09 21:14

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Organizacja',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nazwa', models.CharField(max_length=200, verbose_name='Nazwa')),
                ('opis', models.CharField(max_length=500, verbose_name='Opis')),
                ('adres', models.CharField(max_length=200, verbose_name='Adres')),
            ],
            options={
                'verbose_name': 'Organizacja',
                'verbose_name_plural': 'Organizacje',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SesjaUzytkownika',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_sesji', models.DateTimeField(verbose_name='start sesji')),
                ('koniec_sesji', models.DateTimeField(blank=True, verbose_name='koniec sesji')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sesjeuzytkownika_list', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sesja Użytkownika',
                'verbose_name_plural': 'Sesje Użytkowników',
                'ordering': ['start_sesji'],
            },
        ),
        migrations.CreateModel(
            name='SeriaPomiarowa',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nazwa_serii', models.CharField(max_length=100, verbose_name='nazwa serii')),
                ('opis', models.CharField(max_length=300, verbose_name='opis serii')),
                ('czyZakonczona', models.BooleanField(verbose_name='Czy zakończono serie pomiarową?')),
                ('start_pomiaru', models.DateTimeField(verbose_name='start pomiaru')),
                ('koniec_pomiaru', models.DateTimeField(blank=True, verbose_name='koniec pomiaru')),
                ('organizacja', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.organizacja')),
            ],
            options={
                'verbose_name': 'Seria Pomiarowa',
                'verbose_name_plural': 'Serie Pomiarowe',
            },
        ),
        migrations.CreateModel(
            name='Pomiar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('czyWazny', models.BooleanField(verbose_name='Czy ważny?')),
                ('jednostka_miary', models.CharField(max_length=50, verbose_name='Jednostka miary')),
                ('wartosc', models.CharField(max_length=300, verbose_name='wartość')),
                ('data_pomiaru', models.DateTimeField(auto_now_add=True, verbose_name='data pomiaru')),
                ('seria_pomiarowa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.seriapomiarowa')),
                ('sesja_uzytkownika', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.sesjauzytkownika')),
            ],
            options={
                'verbose_name': 'Pomiar',
                'verbose_name_plural': 'Pomiary',
                'ordering': ['data_pomiaru'],
            },
        ),
        migrations.CreateModel(
            name='LogPomiarowy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('opis', models.CharField(max_length=500, verbose_name='Opis')),
                ('data', models.DateField(verbose_name='data')),
                ('czynnosc', models.CharField(max_length=300, verbose_name='Czynność')),
                ('pomiar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.pomiar')),
            ],
            options={
                'verbose_name': 'Log Pomiarowy',
                'verbose_name_plural': 'Logi Pomiarowe',
            },
        ),
        migrations.CreateModel(
            name='LogAdministracyjny',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('opis', models.CharField(max_length=500, verbose_name='Opis')),
                ('data', models.DateField(verbose_name='Data')),
                ('czynnosc', models.CharField(max_length=200, verbose_name='Czynność')),
                ('organizacja', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.organizacja')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logadministracyjny_list', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Log Administracyjny',
                'verbose_name_plural': 'Logi Administracyjne',
                'ordering': ['data'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='organizacja',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.organizacja'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
